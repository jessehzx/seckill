<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 配置MyBatis过程 -->
    <!-- 1:配置数据库相关参数properties的属性：${} -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 2:配置数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!--配置基本属性-->
        <property name="driverClass" value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>

        <!--c3p0连接池私有属性-->

        <!--为什么要配置这些属性？因为我们要做的是高并发的秒杀系统，可能一些连接被锁住，其他线程会出现拿不到连接的情况，-->
        <!--所以我们要调整一下连接池的私有属性，以更符合我们的场景。-->

        <!-- 连接池最大连接数 默认值：15 -->
        <property name="maxPoolSize" value="30"/>
        <!--连接池最小连接数 默认值：3-->
        <property name="minPoolSize" value="10"/>
        <!--关闭连接后不自动提交 默认值：false-->
        <property name="autoCommitOnClose" value="false"/>
        <!--连接超时时间 当设置的maxPoolSize=30用满的时候，等待获取连接的超时时间
        默认值：0 意味着无限等待，直到有可用连接为止。这有点像Java的饥饿性死锁，这个时候应该有一个超时机制，把一个用户请求的线程释放掉而不是僵死在那里 -->
        <property name="checkoutTimeout" value="1000"/>
        <!-- 当获取连接失败时的重试次数 -->
        <property name="acquireRetryAttempts" value="2"/>
    </bean>

    <!-- 约定大于配置 -->
    <!-- 3:配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource"/>
        <!-- 配置MyBatis的全局配置文件，即mybatis-config.xml -->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!-- 扫描Entity包下的实体，使用别名 -->
        <property name="typeAliasesPackage" value="top.jessehzx.entity"/>
        <!-- 扫描sql配置文件：mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
    </bean>

    <!-- 4:配置Dao接口包，动态实现Dao接口，并将其注入到Spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
        <!-- 扫描Dao接口包 -->
        <property name="basePackage" value="top.jessehzx.dao"/>
    </bean>

</beans>